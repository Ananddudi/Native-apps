# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'cal_S.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtWidgets import * 
from PyQt5.QtGui import * 
from PyQt5.QtCore import * 
from re import *
from first import func
from check import checking
import math 

class Ui_MainWindow(object):
    r = 0
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(324, 374)
        palette = QPalette()
        brush = QBrush(QColor(245, 212, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Button, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.ButtonText, brush)
        brush = QBrush(QColor(245, 212, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Base, brush)
        brush = QBrush(QColor(245, 212, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Window, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Highlight, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Link, brush)
        brush = QBrush(QColor(245, 212, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Button, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.ButtonText, brush)
        brush = QBrush(QColor(245, 212, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Base, brush)
        brush = QBrush(QColor(245, 212, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Window, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Highlight, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Link, brush)
        brush = QBrush(QColor(245, 212, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Button, brush)
        brush = QBrush(QColor(190, 190, 190))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.ButtonText, brush)
        brush = QBrush(QColor(245, 212, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Base, brush)
        brush = QBrush(QColor(245, 212, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Window, brush)
        brush = QBrush(QColor(145, 145, 145))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Highlight, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Link, brush)
        MainWindow.setPalette(palette)
        font = QFont()
        font.setPointSize(14)
        font.setItalic(True)
        MainWindow.setFont(font)
        icon = QIcon()
        icon.addPixmap(QPixmap("cal.png"), QIcon.Normal, QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setWindowOpacity(1.0)
        MainWindow.setAutoFillBackground(False)
        MainWindow.setStyleSheet("background-color: rgb(245, 212, 255);")
        MainWindow.setAnimated(True)
        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton_2 = QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QRect(0, 110, 81, 61))
        font = QFont()
        font.setFamily("Yrsa Medium")
        font.setPointSize(20)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setStyleSheet("background-color: rgb(198, 255, 202);")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QRect(80, 110, 81, 61))
        font = QFont()
        font.setFamily("Yrsa Medium")
        font.setPointSize(20)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setStyleSheet("background-color: rgb(198, 255, 202);")
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QRect(160, 110, 81, 61))
        font = QFont()
        font.setFamily("Yrsa Medium")
        font.setPointSize(20)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setStyleSheet("background-color: rgb(198, 255, 202);\n"
"")
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QRect(0, 170, 81, 61))
        font = QFont()
        font.setFamily("Yrsa Medium")
        font.setPointSize(20)
        self.pushButton_5.setFont(font)
        self.pushButton_5.setStyleSheet("background-color: rgb(198, 255, 202);")
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_6 = QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QRect(80, 170, 81, 61))
        font = QFont()
        font.setFamily("Yrsa Medium")
        font.setPointSize(20)
        self.pushButton_6.setFont(font)
        self.pushButton_6.setStyleSheet("background-color: rgb(198, 255, 202);")
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_7 = QPushButton(self.centralwidget)
        self.pushButton_7.setGeometry(QRect(160, 170, 81, 61))
        font = QFont()
        font.setFamily("Yrsa Medium")
        font.setPointSize(20)
        self.pushButton_7.setFont(font)
        self.pushButton_7.setStyleSheet("background-color: rgb(198, 255, 202);")
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_8 = QPushButton(self.centralwidget)
        self.pushButton_8.setGeometry(QRect(0, 230, 81, 61))
        font = QFont()
        font.setFamily("Yrsa Medium")
        font.setPointSize(20)
        self.pushButton_8.setFont(font)
        self.pushButton_8.setStyleSheet("background-color: rgb(198, 255, 202);")
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_9 = QPushButton(self.centralwidget)
        self.pushButton_9.setGeometry(QRect(80, 230, 81, 61))
        font = QFont()
        font.setFamily("Yrsa Medium")
        font.setPointSize(20)
        self.pushButton_9.setFont(font)
        self.pushButton_9.setStyleSheet("background-color: rgb(198, 255, 202);")
        self.pushButton_9.setObjectName("pushButton_9")
        self.pushButton_10 = QPushButton(self.centralwidget)
        self.pushButton_10.setGeometry(QRect(160, 230, 81, 61))
        font = QFont()
        font.setFamily("Yrsa Medium")
        font.setPointSize(20)
        self.pushButton_10.setFont(font)
        self.pushButton_10.setStyleSheet("background-color: rgb(198, 255, 202);")
        self.pushButton_10.setObjectName("pushButton_10")
        self.pushButton_11 = QPushButton(self.centralwidget)
        self.pushButton_11.setGeometry(QRect(240, 120, 81, 51))
        font = QFont()
        font.setFamily("Tibetan Machine Uni")
        font.setPointSize(48)
        self.pushButton_11.setFont(font)
        self.pushButton_11.setStyleSheet("background-color: rgb(143, 255, 52);")
        self.pushButton_11.setObjectName("pushButton_11")
        self.pushButton_13 = QPushButton(self.centralwidget)
        self.pushButton_13.setGeometry(QRect(240, 220, 81, 51))
        font = QFont()
        font.setFamily("Yrsa SemiBold")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_13.setFont(font)
        self.pushButton_13.setStyleSheet("background-color: rgb(51, 116, 255);")
        self.pushButton_13.setObjectName("pushButton_13")
        self.pushButton_14 = QPushButton(self.centralwidget)
        self.pushButton_14.setGeometry(QRect(240, 70, 81, 51))
        font = QFont()
        font.setFamily("Rasa")
        font.setPointSize(36)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.pushButton_14.setFont(font)
        self.pushButton_14.setStyleSheet("background-color: rgb(255, 21, 103);\n"
"")
        self.pushButton_14.setInputMethodHints(Qt.ImhHiddenText)
        self.pushButton_14.setObjectName("pushButton_14")
        self.pushButton_15 = QPushButton(self.centralwidget)
        self.pushButton_15.setGeometry(QRect(0, 290, 241, 41))
        font = QFont()
        font.setFamily("Yrsa Medium")
        font.setPointSize(20)
        self.pushButton_15.setFont(font)
        self.pushButton_15.setStyleSheet("background-color: rgb(198, 255, 202);")
        self.pushButton_15.setObjectName("pushButton_15")
        self.lineEdit = QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QRect(0, 0, 321, 31))
        palette = QPalette()
        brush = QBrush(QColor(255, 255, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.WindowText, brush)
        brush = QBrush(QColor(255, 212, 197))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Button, brush)
        brush = QBrush(QColor(255, 255, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Text, brush)
        brush = QBrush(QColor(255, 255, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.ButtonText, brush)
        brush = QBrush(QColor(255, 212, 197))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Base, brush)
        brush = QBrush(QColor(255, 212, 197))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Window, brush)
        brush = QBrush(QColor(255, 255, 255, 128))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.PlaceholderText, brush)
        brush = QBrush(QColor(255, 255, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.WindowText, brush)
        brush = QBrush(QColor(255, 212, 197))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Button, brush)
        brush = QBrush(QColor(255, 255, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Text, brush)
        brush = QBrush(QColor(255, 255, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.ButtonText, brush)
        brush = QBrush(QColor(255, 212, 197))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Base, brush)
        brush = QBrush(QColor(255, 212, 197))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Window, brush)
        brush = QBrush(QColor(255, 255, 255, 128))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.PlaceholderText, brush)
        brush = QBrush(QColor(190, 190, 190))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.WindowText, brush)
        brush = QBrush(QColor(255, 212, 197))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Button, brush)
        brush = QBrush(QColor(190, 190, 190))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Text, brush)
        brush = QBrush(QColor(190, 190, 190))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.ButtonText, brush)
        brush = QBrush(QColor(255, 212, 197))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Base, brush)
        brush = QBrush(QColor(255, 212, 197))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Window, brush)
        brush = QBrush(QColor(0, 0, 0, 128))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.PlaceholderText, brush)
        self.lineEdit.setPalette(palette)
        font = QFont()
        font.setFamily("Sans Serif")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.lineEdit.setFont(font)
        self.lineEdit.setCursor(QCursor(Qt.ArrowCursor))
        self.lineEdit.setStyleSheet("color: black;background-color: rgb(255, 212, 197);\n"
"font: 10pt \"Sans Serif\";\n"
"")
        self.lineEdit.setText("")
        self.lineEdit.setAlignment(Qt.AlignBottom|Qt.AlignRight|Qt.AlignTrailing)
        self.lineEdit.setPlaceholderText("")
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton_16 = QPushButton(self.centralwidget)
        self.pushButton_16.setGeometry(QRect(240, 170, 81, 51))
        font = QFont()
        font.setFamily("Yrsa SemiBold")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_16.setFont(font)
        self.pushButton_16.setStyleSheet("background-color: rgb(120, 226, 255);")
        self.pushButton_16.setObjectName("pushButton_16")
        self.pushButton = QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QRect(80, 70, 161, 41))
        font = QFont()
        font.setFamily("URW Bookman L")
        font.setPointSize(20)
        font.setBold(False)
        font.setItalic(True)
        font.setWeight(50)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("background-color: rgb(255, 170, 0);")
        self.pushButton.setObjectName("pushButton")
        self.pushButton_12 = QPushButton(self.centralwidget)
        self.pushButton_12.setGeometry(QRect(0, 70, 80, 41))
        palette = QPalette()
        brush = QBrush(QColor(85, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Button, brush)
        brush = QBrush(QColor(255, 255, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.ButtonText, brush)
        brush = QBrush(QColor(85, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Base, brush)
        brush = QBrush(QColor(85, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Window, brush)
        brush = QBrush(QColor(85, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Button, brush)
        brush = QBrush(QColor(255, 255, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.ButtonText, brush)
        brush = QBrush(QColor(85, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Base, brush)
        brush = QBrush(QColor(85, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Window, brush)
        brush = QBrush(QColor(85, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Button, brush)
        brush = QBrush(QColor(190, 190, 190))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.ButtonText, brush)
        brush = QBrush(QColor(85, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Base, brush)
        brush = QBrush(QColor(85, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Window, brush)
        self.pushButton_12.setPalette(palette)
        font = QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(18)
        self.pushButton_12.setFont(font)
        self.pushButton_12.setFocusPolicy(Qt.StrongFocus)
        self.pushButton_12.setStyleSheet("background-color: rgb(85, 0, 0);")
        self.pushButton_12.setInputMethodHints(Qt.ImhNone)
        self.pushButton_12.setCheckable(False)
        self.pushButton_12.setChecked(False)
        self.pushButton_12.setObjectName("pushButton_12")
        self.percent = QPushButton(self.centralwidget)
        self.percent.setGeometry(QRect(240, 50, 81, 21))
        self.percent.setStyleSheet("background-color: rgb(85, 170, 0);")
        self.percent.setObjectName("percent")
        self.modulus = QPushButton(self.centralwidget)
        self.modulus.setGeometry(QRect(160, 50, 81, 21))
        self.modulus.setStyleSheet("\n"
"background-color: rgb(62, 255, 152);")
        self.modulus.setObjectName("modulus")
        self.square = QPushButton(self.centralwidget)
        self.square.setGeometry(QRect(80, 50, 80, 21))
        self.square.setStyleSheet("background-color: rgb(170, 85, 0);")
        self.square.setObjectName("square")
        self.root = QPushButton(self.centralwidget)
        self.root.setGeometry(QRect(0, 50, 80, 21))
        self.root.setStyleSheet("background-color: rgb(170, 170, 127);")
        self.root.setObjectName("root")
        self.label1 = QLabel(self.centralwidget)
        self.label1.setGeometry(QRect(0, 31, 321, 20))
        palette = QPalette()
        brush = QBrush(QColor(71, 25, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.WindowText, brush)
        gradient = QLinearGradient(0.0, 0.0, 0.0, 1.0)
        gradient.setSpread(QGradient.PadSpread)
        gradient.setCoordinateMode(QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.0, QColor(255, 255, 255))
        gradient.setColorAt(0.495, QColor(255, 255, 255))
        gradient.setColorAt(0.505, QColor(255, 0, 0))
        gradient.setColorAt(1.0, QColor(255, 0, 0))
        brush = QBrush(gradient)
        palette.setBrush(QPalette.Active, QPalette.Button, brush)
        gradient = QLinearGradient(0.0, 0.0, 0.0, 1.0)
        gradient.setSpread(QGradient.PadSpread)
        gradient.setCoordinateMode(QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.0, QColor(255, 255, 255))
        gradient.setColorAt(0.495, QColor(255, 255, 255))
        gradient.setColorAt(0.505, QColor(255, 0, 0))
        gradient.setColorAt(1.0, QColor(255, 0, 0))
        brush = QBrush(gradient)
        palette.setBrush(QPalette.Active, QPalette.Base, brush)
        gradient = QLinearGradient(0.0, 0.0, 0.0, 1.0)
        gradient.setSpread(QGradient.PadSpread)
        gradient.setCoordinateMode(QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.0, QColor(255, 255, 255))
        gradient.setColorAt(0.495, QColor(255, 255, 255))
        gradient.setColorAt(0.505, QColor(255, 0, 0))
        gradient.setColorAt(1.0, QColor(255, 0, 0))
        brush = QBrush(gradient)
        palette.setBrush(QPalette.Active, QPalette.Window, brush)
        brush = QBrush(QColor(71, 25, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.WindowText, brush)
        gradient = QLinearGradient(0.0, 0.0, 0.0, 1.0)
        gradient.setSpread(QGradient.PadSpread)
        gradient.setCoordinateMode(QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.0, QColor(255, 255, 255))
        gradient.setColorAt(0.495, QColor(255, 255, 255))
        gradient.setColorAt(0.505, QColor(255, 0, 0))
        gradient.setColorAt(1.0, QColor(255, 0, 0))
        brush = QBrush(gradient)
        palette.setBrush(QPalette.Inactive, QPalette.Button, brush)
        gradient = QLinearGradient(0.0, 0.0, 0.0, 1.0)
        gradient.setSpread(QGradient.PadSpread)
        gradient.setCoordinateMode(QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.0, QColor(255, 255, 255))
        gradient.setColorAt(0.495, QColor(255, 255, 255))
        gradient.setColorAt(0.505, QColor(255, 0, 0))
        gradient.setColorAt(1.0, QColor(255, 0, 0))
        brush = QBrush(gradient)
        palette.setBrush(QPalette.Inactive, QPalette.Base, brush)
        gradient = QLinearGradient(0.0, 0.0, 0.0, 1.0)
        gradient.setSpread(QGradient.PadSpread)
        gradient.setCoordinateMode(QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.0, QColor(255, 255, 255))
        gradient.setColorAt(0.495, QColor(255, 255, 255))
        gradient.setColorAt(0.505, QColor(255, 0, 0))
        gradient.setColorAt(1.0, QColor(255, 0, 0))
        brush = QBrush(gradient)
        palette.setBrush(QPalette.Inactive, QPalette.Window, brush)
        brush = QBrush(QColor(190, 190, 190))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.WindowText, brush)
        gradient = QLinearGradient(0.0, 0.0, 0.0, 1.0)
        gradient.setSpread(QGradient.PadSpread)
        gradient.setCoordinateMode(QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.0, QColor(255, 255, 255))
        gradient.setColorAt(0.495, QColor(255, 255, 255))
        gradient.setColorAt(0.505, QColor(255, 0, 0))
        gradient.setColorAt(1.0, QColor(255, 0, 0))
        brush = QBrush(gradient)
        palette.setBrush(QPalette.Disabled, QPalette.Button, brush)
        gradient = QLinearGradient(0.0, 0.0, 0.0, 1.0)
        gradient.setSpread(QGradient.PadSpread)
        gradient.setCoordinateMode(QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.0, QColor(255, 255, 255))
        gradient.setColorAt(0.495, QColor(255, 255, 255))
        gradient.setColorAt(0.505, QColor(255, 0, 0))
        gradient.setColorAt(1.0, QColor(255, 0, 0))
        brush = QBrush(gradient)
        palette.setBrush(QPalette.Disabled, QPalette.Base, brush)
        gradient = QLinearGradient(0.0, 0.0, 0.0, 1.0)
        gradient.setSpread(QGradient.PadSpread)
        gradient.setCoordinateMode(QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.0, QColor(255, 255, 255))
        gradient.setColorAt(0.495, QColor(255, 255, 255))
        gradient.setColorAt(0.505, QColor(255, 0, 0))
        gradient.setColorAt(1.0, QColor(255, 0, 0))
        brush = QBrush(gradient)
        palette.setBrush(QPalette.Disabled, QPalette.Window, brush)
        self.label1.setPalette(palette)
        font = QFont()
        font.setFamily("Tlwg Typo")
        font.setPointSize(16)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label1.setFont(font)
        self.label1.setStyleSheet("background-color: qconicalgradient(cx:0, cy:0, angle:135, stop:0 rgba(23, 105, 255, 69), stop:0.375 rgba(0, 190, 255, 69), stop:0.423533 rgba(0, 120, 255, 145), stop:0.45 rgba(247, 255, 0, 208), stop:0.477581 rgba(255, 71, 107, 130), stop:0.518717 rgba(199, 107, 230, 130), stop:0.55 rgba(0, 255, 30, 255), stop:0.57754 rgba(255, 203, 0, 130), stop:0.625 rgba(255, 255, 0, 69), stop:1 rgba(255, 255, 0, 69));\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:1, stop:0 rgba(255, 255, 255, 255), stop:0.495 rgba(255, 255, 255, 255), stop:0.505 rgba(255, 0, 0, 255), stop:1 rgba(255, 0, 0, 255));")
        self.label1.setTextFormat(Qt.PlainText)
        self.label1.setAlignment(Qt.AlignCenter)
        self.label1.setObjectName("label1")
        self.switch1 = QPushButton(self.centralwidget)
        self.switch1.setGeometry(QRect(240, 270, 81, 61))
        palette = QPalette()
        brush = QBrush(QColor(224, 255, 187))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Button, brush)
        brush = QBrush(QColor(255, 0, 234))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.ButtonText, brush)
        brush = QBrush(QColor(224, 255, 187))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Base, brush)
        brush = QBrush(QColor(224, 255, 187))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Window, brush)
        brush = QBrush(QColor(224, 255, 187))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Button, brush)
        brush = QBrush(QColor(255, 0, 234))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.ButtonText, brush)
        brush = QBrush(QColor(224, 255, 187))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Base, brush)
        brush = QBrush(QColor(224, 255, 187))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Window, brush)
        brush = QBrush(QColor(224, 255, 187))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Button, brush)
        brush = QBrush(QColor(190, 190, 190))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.ButtonText, brush)
        brush = QBrush(QColor(224, 255, 187))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Base, brush)
        brush = QBrush(QColor(224, 255, 187))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Window, brush)
        self.switch1.setPalette(palette)
        font = QFont()
        font.setFamily("Z003 [urw]")
        font.setPointSize(18)
        font.setBold(False)
        font.setItalic(True)
        font.setWeight(50)
        self.switch1.setFont(font)
        self.switch1.setStyleSheet("background-color: rgb(224, 255, 187);\n"
"\n"
"")
        self.switch1.setObjectName("switch1")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QMenuBar(MainWindow)
        self.menubar.setGeometry(QRect(0, 0, 324, 20))
        self.menubar.setObjectName("menubar")
        self.menuFile = QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.E1 = QAction(MainWindow)
        font = QFont()
        font.setItalic(True)
        self.E1.setFont(font)
        self.E1.setShortcutContext(Qt.WidgetWithChildrenShortcut)
        self.E1.setObjectName("E1")
        self.E1_2 = QAction(MainWindow)
        font = QFont()
        font.setPointSize(11)
        font.setItalic(True)
        self.E1_2.setFont(font)
        self.E1_2.setObjectName("E1_2")
        self.menuFile.addAction(self.E1_2)
        self.menubar.addAction(self.menuFile.menuAction())

        self.retranslateUi(MainWindow)
        QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Calculator"))
        self.pushButton_2.setText(_translate("MainWindow", "1"))
        self.pushButton_3.setText(_translate("MainWindow", "2"))
        self.pushButton_4.setText(_translate("MainWindow", "3"))
        self.pushButton_5.setText(_translate("MainWindow", "4"))
        self.pushButton_6.setText(_translate("MainWindow", "5"))
        self.pushButton_7.setText(_translate("MainWindow", "6"))
        self.pushButton_8.setText(_translate("MainWindow", "7"))
        self.pushButton_9.setText(_translate("MainWindow", "8"))
        self.pushButton_10.setText(_translate("MainWindow", "9"))
        self.pushButton_11.setStatusTip(_translate("MainWindow", "Minus"))
        self.pushButton_11.setText(_translate("MainWindow", "-"))
        self.pushButton_13.setStatusTip(_translate("MainWindow", "Division"))
        self.pushButton_13.setText(_translate("MainWindow", "/"))
        self.pushButton_14.setStatusTip(_translate("MainWindow", "Plus"))
        self.pushButton_14.setText(_translate("MainWindow", "+"))
        self.pushButton_15.setText(_translate("MainWindow", "0"))
        self.pushButton_16.setStatusTip(_translate("MainWindow", "Multipy"))
        self.pushButton_16.setText(_translate("MainWindow", "x"))
        self.pushButton.setText(_translate("MainWindow", "Equals"))
        self.pushButton_12.setStatusTip(_translate("MainWindow", "Clear All"))
        self.switch1.setStatusTip(_translate("MainWindow", "It will switch the value to last"))
        self.pushButton_12.setText(_translate("MainWindow", "Clear"))
        self.percent.setStatusTip(_translate("MainWindow", "Type the value to get percentage"))
        self.percent.setText(_translate("MainWindow", "Percent"))
        self.modulus.setStatusTip(_translate("MainWindow", "Modulus"))
        self.modulus.setText(_translate("MainWindow", "Modulus "))
        self.square.setStatusTip(_translate("MainWindow", "Square"))
        self.square.setText(_translate("MainWindow", "Square"))
        self.root.setStatusTip(_translate("MainWindow", "Root the value"))
        self.root.setText(_translate("MainWindow", "Root"))
        self.label1.setText(_translate("MainWindow", "Anand dudi"))
        self.switch1.setText(_translate("MainWindow", "Switch"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.E1.setText(_translate("MainWindow", "Exit"))
        self.E1.setStatusTip(_translate("MainWindow", "Exiting"))
        self.E1.setShortcut(_translate("MainWindow", "Ctrl+X"))
        self.E1_2.setText(_translate("MainWindow", "Exit"))

        self.lineEdit.setReadOnly(True)
            
        self.pushButton_2.clicked.connect(self.txt1)
        self.pushButton_3.clicked.connect(self.txt2)
        self.pushButton_4.clicked.connect(self.txt3)
        self.pushButton_5.clicked.connect(self.txt4)
        self.pushButton_6.clicked.connect(self.txt5)
        self.pushButton_7.clicked.connect(self.txt6)
        self.pushButton_8.clicked.connect(self.txt7)
        self.pushButton_9.clicked.connect(self.txt8)
        self.pushButton_10.clicked.connect(self.txt9)
        self.pushButton_15.clicked.connect(self.txt10)
        self.pushButton_14.clicked.connect(self.txt11)
        self.pushButton_11.clicked.connect(self.txt12)
        self.pushButton_16.clicked.connect(self.txt13)
        self.pushButton_13.clicked.connect(self.txt14) 
        self.pushButton_12.clicked.connect(self.clear)
        self.square.clicked.connect(self.square1)
        self.root.clicked.connect(self.root1)
        self.modulus.clicked.connect(self.modus1)
        self.percent.clicked.connect(self.percent1)
        self.switch1.clicked.connect(self.switchfunc)


        self.pushButton.clicked.connect(self.calcu)
        self.E1_2.triggered.connect(qApp.quit)
    def switchfunc(self):
        val = self.lineEdit.text()
        if findall("^[^0-9]+[0-9]+[^0-9]+[0-9]+$",val):
            self.r = 0 
        else:
            self.r = 1
        
    def percent1(self):
        self.lineEdit.setText("what is  percent of ")

    def clear(self):
        self.r = 0
        self.lineEdit.clear()
    def txt1(self):
        text = self.lineEdit.text()
        textforvalues = findall("[0-9]+",text)
        textvalue = findall("what is",text)

        if text == "what is  percent of ":
            self.lineEdit.setText("what is {} percent of ")
            txt = self.lineEdit.text()
            formt = txt.format(1)
            self.lineEdit.setText(formt)
        elif self.r == 1 and textvalue:
            line = self.lineEdit.text()
           
            self.lineEdit.setText(line + "1")

        elif len(textforvalues) == 1 and textvalue:
            type1 = textforvalues[0]
            typeit = type1 + "1"
            afterrep = text.replace(type1,typeit)

            self.lineEdit.setText(afterrep)

        else:
            self.lineEdit.setText(text +"1")  


    def txt2(self):

        text = self.lineEdit.text()
        textforvalues = findall("[0-9]+",text)
        textvalue = findall("what is",text)

        if text == "what is  percent of ":
            self.lineEdit.setText("what is {} percent of ")
            txt = self.lineEdit.text()
            formt = txt.format(2)
            self.lineEdit.setText(formt)
        elif self.r == 1 and textvalue:
            line = self.lineEdit.text()
           
            self.lineEdit.setText(line + "2")

        elif len(textforvalues) == 1 and textvalue:
            type1 = textforvalues[0]
            typeit = type1 + "2"
            afterrep = text.replace(type1,typeit)

            self.lineEdit.setText(afterrep)

        else:
            self.lineEdit.setText(text +"2")
    def txt3(self):

        text = self.lineEdit.text()
        textforvalues = findall("[0-9]+",text)
        textvalue = findall("what is",text)

        if text == "what is  percent of ":
            self.lineEdit.setText("what is {} percent of ")
            txt = self.lineEdit.text()
            formt = txt.format(3)
            self.lineEdit.setText(formt)
        elif self.r == 1 and textvalue:
            line = self.lineEdit.text()
           
            self.lineEdit.setText(line + "3")

        elif len(textforvalues) == 1 and textvalue:
            type1 = textforvalues[0]
            typeit = type1 + "3"
            afterrep = text.replace(type1,typeit)

            self.lineEdit.setText(afterrep)

        else:
            self.lineEdit.setText(text +"3")
    def txt4(self):

        text = self.lineEdit.text()
        textforvalues = findall("[0-9]+",text)
        textvalue = findall("what is",text)

        if text == "what is  percent of ":
            self.lineEdit.setText("what is {} percent of ")
            txt = self.lineEdit.text()
            formt = txt.format(4)
            self.lineEdit.setText(formt)
        elif self.r == 1 and textvalue:
            line = self.lineEdit.text()
           
            self.lineEdit.setText(line + "4")

        elif len(textforvalues) == 1 and textvalue:
            type1 = textforvalues[0]
            typeit = type1 + "4"
            afterrep = text.replace(type1,typeit)

            self.lineEdit.setText(afterrep)

        else:
            self.lineEdit.setText(text +"4")
    def txt5(self):

        text = self.lineEdit.text()
        textforvalues = findall("[0-9]+",text)
        textvalue = findall("what is",text)

        if text == "what is  percent of ":
            self.lineEdit.setText("what is {} percent of ")
            txt = self.lineEdit.text()
            formt = txt.format(5)
            self.lineEdit.setText(formt)
        elif self.r == 1 and textvalue:
            line = self.lineEdit.text()
           
            self.lineEdit.setText(line + "5")

        elif len(textforvalues) == 1 and textvalue:
            type1 = textforvalues[0]
            typeit = type1 + "5"
            afterrep = text.replace(type1,typeit)

            self.lineEdit.setText(afterrep)

        else:
            self.lineEdit.setText(text +"5")
    def txt6(self):

        text = self.lineEdit.text()
        textforvalues = findall("[0-9]+",text)
        textvalue = findall("what is",text)

        if text == "what is  percent of ":
            self.lineEdit.setText("what is {} percent of ")
            txt = self.lineEdit.text()
            formt = txt.format(6)
            self.lineEdit.setText(formt)
        elif self.r == 1 and textvalue:
            line = self.lineEdit.text()
           
            self.lineEdit.setText(line + "6")

        elif len(textforvalues) == 1 and textvalue:
            type1 = textforvalues[0]
            typeit = type1 + "6"
            afterrep = text.replace(type1,typeit)

            self.lineEdit.setText(afterrep)

        else:
            self.lineEdit.setText(text +"6")
    def txt7(self):

        text = self.lineEdit.text()
        textforvalues = findall("[0-9]+",text)
        textvalue = findall("what is",text)

        if text == "what is  percent of ":
            self.lineEdit.setText("what is {} percent of ")
            txt = self.lineEdit.text()
            formt = txt.format(7)
            self.lineEdit.setText(formt)
        elif self.r == 1 and textvalue:
            line = self.lineEdit.text()
           
            self.lineEdit.setText(line + "7")

        elif len(textforvalues) == 1 and textvalue:
            type1 = textforvalues[0]
            typeit = type1 + "7"
            afterrep = text.replace(type1,typeit)

            self.lineEdit.setText(afterrep)

        else:
            self.lineEdit.setText(text +"7")
    def txt8(self):

        text = self.lineEdit.text()
        textforvalues = findall("[0-9]+",text)
        textvalue = findall("what is",text)

        if text == "what is  percent of ":
            self.lineEdit.setText("what is {} percent of ")
            txt = self.lineEdit.text()
            formt = txt.format(8)
            self.lineEdit.setText(formt)
        elif self.r == 1 and textvalue:
            line = self.lineEdit.text()
           
            self.lineEdit.setText(line + "8")

        elif len(textforvalues) == 1 and textvalue:
            type1 = textforvalues[0]
            typeit = type1 + "8"
            afterrep = text.replace(type1,typeit)

            self.lineEdit.setText(afterrep)

        else:
            self.lineEdit.setText(text +"8")
    def txt9(self):

        text = self.lineEdit.text()
        textforvalues = findall("[0-9]+",text)
        textvalue = findall("what is",text)

        if text == "what is  percent of ":
            self.lineEdit.setText("what is {} percent of ")
            txt = self.lineEdit.text()
            formt = txt.format(9)
            self.lineEdit.setText(formt)
        elif self.r == 1 and textvalue:
            line = self.lineEdit.text()
           
            self.lineEdit.setText(line + "9")

        elif len(textforvalues) == 1 and textvalue:
            type1 = textforvalues[0]
            typeit = type1 + "9"
            afterrep = text.replace(type1,typeit)

            self.lineEdit.setText(afterrep)

        else:
            self.lineEdit.setText(text +"9")
    def txt10(self):

        text = self.lineEdit.text()
        textforvalues = findall("[0-9]+",text)
        textvalue = findall("what is",text)

        if text == "what is  percent of ":
            self.lineEdit.setText("what is {} percent of ")
            txt = self.lineEdit.text()
            formt = txt.format(0)
            self.lineEdit.setText(formt)
        elif self.r == 1 and textvalue:
            line = self.lineEdit.text()
           
            self.lineEdit.setText(line + "0")

        elif len(textforvalues) == 1 and textvalue:
            type1 = textforvalues[0]
            typeit = type1 + "0"
            afterrep = text.replace(type1,typeit)

            self.lineEdit.setText(afterrep)

        else:
            self.lineEdit.setText(text +"0")
    def txt11(self):
        text = str(self.lineEdit.text())
        if text[-1] != "+" and text[-1] != "-" and text[-1] != "x" and text[-1] != "/" and text[-1] != "%": # there must not two identical sign one after another
            self.lineEdit.setText(text + "+")
    def txt12(self):
        text = self.lineEdit.text()
        if text[-1] != "+" and text[-1] != "-" and text[-1] != "x" and text[-1] != "/" and text[-1] != "%":
            self.lineEdit.setText(text + "-")
    def txt13(self):
        text = self.lineEdit.text()
        if text[-1] != "+" and text[-1] != "-" and text[-1] != "x" and text[-1] != "/" and text[-1] != "%":
            self.lineEdit.setText(text + "x")
    def txt14(self):
        text = self.lineEdit.text()
        if text[-1] != "+" and text[-1] != "-" and text[-1] != "x" and text[-1] != "/" and text[-1] != "%":
            self.lineEdit.setText(text + "/")

    def modus1(self):
        text = self.lineEdit.text()
        if text[-1] != "+" and text[-1] != "-" and text[-1] != "x" and text[-1] != "/" and text[-1] != "%":
            self.lineEdit.setText(text + "%")

    def square1(self):
        read_V = int(self.lineEdit.text())
        val = str(read_V * read_V)
        self.lineEdit.setText(val)

    def root1(self):
        r = int(self.lineEdit.text())
        sav = str(math.sqrt(r))
        self.lineEdit.setText(sav)


    def calcu(self):
        value = self.lineEdit.text();
        Pvalue = findall("\+",value)
        Mvalue = findall("-",value)
        Muvalue = findall("x",value)
        Dvalue = findall("/",value)
        ModusValue = findall("%",value)
        percentstring = findall("what is",value)
        if percentstring:
            if findall("^[^0-9]+[0-9]+[^0-9]+[0-9]+$",value):
                self.r = 0
                takingValues = findall("[0-9]+",value)
                fsValue = int(takingValues[0])
                scValue = int(takingValues[1])
                x1 = (fsValue*scValue)/100
                self.lineEdit.setText(str(x1))
            else:
                self.r = 1



        if ModusValue:
            if findall("[-]",value) or findall("[/]",value) or findall("[x]",value):
                checking(self,1)
            else:
                if findall("[^%][0-9]*$",value) :
                    getFirst_value = int(value[0:value.find('%')])
                    getSec_value = int(value[value.find('%') + 1:])
                    V_is = getFirst_value % getSec_value
                    self.lineEdit.setText(str(V_is))

        if Pvalue:
               
            
                        if findall("[-]",value) or findall("[/]",value) or findall("[x]",value): 
                            checking(self,2)
                        else:
                            FwithPlus = value[0:value.find('+')]
                            SwithPlus = value[(value.find('+'))+1:]
                            result = func(int(FwithPlus),SwithPlus,"+")
                            return self.lineEdit.setText(str(result))
        elif Mvalue:

                        if findall("[+]",value) or findall("[/]",value) or findall("[x]",value):
                            checking(self)
                        else:
                            FwithMinus = value[0:value.find('-')]
                            print(FwithMinus)
                            SwithMinus = value[(value.find('-'))+1:]
                            print(SwithMinus)
                            result = func(int(FwithMinus),SwithMinus,"-")
                            return self.lineEdit.setText(str(result))
        elif Muvalue:

        
                        if findall("[+]",value) or findall("[/]",value) or findall("[-]",value):
                            checking(self)
                        else:
                            FwithMul = value[0:value.find('x')]
                            print(FwithMul)
                            SwithMul = value[(value.find('x'))+1:]
                            print(SwithMul)
                            result = func(int(FwithMul),SwithMul,"x")
                            return self.lineEdit.setText(str(result))
        elif Dvalue:

                        if findall("[+]",value) or findall("[-]",value) or findall("[x]",value):
                            checking(self)
                        else:
                            FwithDiv = value[0:value.find('/')]
                    
                            SwithDiv = value[(value.find('/'))+1:]
                    
                            result = func(int(FwithDiv),SwithDiv,"/")
                            return self.lineEdit.setText(str(result))

  



if __name__ == "__main__":
    import sys
    app = QApplication(sys.argv)
    MainWindow = QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
